@model List<EuroApi.Models.Match>

@{
    ViewBag.Title = "Championship";
    Layout = "../Shared/_Layout.cshtml";
}

<div class="championshipWrapper">
    
    @for(var i = 0; i<4; i++)
    {
        
        var matchesInGroup = Model.Skip(i * 6).Take(6).ToList();
        var group = matchesInGroup.FirstOrDefault().HomeTeam.Group.Name;
        var leftRight = i%2 == 0 ? "left" : "right";
        <div class="groupBet" style="float: @leftRight;">
            @Html.Partial("_GroupBet", matchesInGroup)
            <div style="clear: left;"></div>
            <input type="button" onclick="removeAllUserBets('@(group)');" value="Remove all bets group @group" />
        </div>
    }
</div>
<div class="quarterFinals"><h3>Quarter finals</h3></div>
<div class="semiFinals"></div>
<div class="final"></div>

<script>
    $(document).ready(function () {
        $(".resultBet").on("change", function (event) {
            if (isNaN($(this).val()) || $(this).val() > 20) {
                $(this).val("0");
            }
            var parentDiv = $(this).parent();
            var homeGoals = parentDiv.find(".homeTeam").val();
            var awayGoals = parentDiv.find(".awayTeam").val();
            var group = $(this).attr("group");
            setBet($(this).attr("matchId"), homeGoals, awayGoals, group);
            setTimeout("getQuarterFinals()", 100);
            setTimeout("getQuarterFinals()", 100);
            setTimeout("getQuarterFinals()", 100);
        });
        getInitialGroupsAtStartup();
        setupKnockoutChangeEvents();
        setTimeout("getQuarterFinals()", 500);        
    });

    function setupKnockoutChangeEvents() {
        $(".resultBetKnockout").live("change", function (event) {
            if (isNaN($(this).val()) || $(this).val() > 20) {
                $(this).val("0");
            }
            var parentDiv = $(this).parent();
            var homeGoals = parentDiv.find(".homeTeam").val();
            var awayGoals = parentDiv.find(".awayTeam").val();
            if ($(this).hasClass("quarter")) {
                setKnockoutBet("semiFinals", $(this).attr("matchId"), homeGoals, awayGoals, $(this).attr("homeTeamId"), $(this).attr("awayTeamId"));
            }
            else if ($(this).hasClass("semi")) {
                setKnockoutBet("final", $(this).attr("matchId"), homeGoals, awayGoals, $(this).attr("homeTeamId"), $(this).attr("awayTeamId"));
            }
            else if ($(this).hasClass("final")) {
                setKnockoutBet("final", $(this).attr("matchId"), homeGoals, awayGoals, $(this).attr("homeTeamId"), $(this).attr("awayTeamId"));
            }
        });
    }

    var setKnockoutBet = function (type, matchId, homeGoals, awayGoals, homeTeamId, awayTeamId) {
        $.ajax({
            type: 'POST',
            url: "/KnockoutMatchResultBet/SetBet",
            data: { matchId: matchId, homeGoals: homeGoals, awayGoals: awayGoals, homeTeamId: homeTeamId, awayTeamId: awayTeamId },
            success: function (results) {
                console.log(type);
                $("." + type).empty();
                $("." + type).html("<h2>" + capitaliseFirstLetter(type) + "</h2>");
                for (var i = 0; i < results.length; i++) {
                    $("." + type).append(results[i]);
                }
            }
        });
    };

    function getInitialGroupsAtStartup() {
        var groups = ["A", "B", "C", "D"];
        for (var i = 0; i < groups.length; i++ ) {
            $.ajax({
                type: 'POST',
                url: "/MatchResultBet/GetTeamsInGroup",
                data: { group: groups[i] },
                success: function (results) {
                    outputGroup(results, results.group);
                }
            });
        }
    }

    function setBet(matchId, homeGoals, awayGoals, group) {
        $.ajax({
            type: 'POST',
            url: "/MatchResultBet/SetBet",
            data: { matchId: matchId, homeGoals: homeGoals, awayGoals: awayGoals, group: group },
            success: function (results) {
                outputGroup(results, group);
            }
        });
    }
    
    function getURLParameter(name) {
        return decodeURI(
            (RegExp(name + '=' + '(.+?)(&|$)').exec(location.search) || [, null])[1]
        );
    }

    function outputGroup(results, group) {
        $(".group" + group + "").html(results.html);        
    }

    function removeAllUserBets(group) {
        $.ajax({
            type: 'POST',
            url: "/MatchResultBet/RemoveAllBets",
            data: { group: group },
            success: function (results) {
                outputGroup(results, group);
                $(".resultBet").val("0");
            }
        });
    }

    function getQuarterFinals() {
        $.ajax({
            type: 'POST',
            url: "/MatchResultBet/QuarterFinals",
            success: function (results) {
                $(".quarterFinals").html('');
                $(".quarterFinals").html('<h2>Quarter finals</h2>');
                for (var i = 0; i < results.length; i++) {
                    $(".quarterFinals").append(results[i]);
                }
            }
        });
    }
    function capitaliseFirstLetter(string)
    {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
</script>
